DecisionTreeRulesGenDouble.cpp is a C source file used to generate rule files.

If you need to compile it, use the following command:
$clang++ -g DecisionTreeRulesGenDouble.cpp $(/usr/local/llvm-11.1.0/bin/llvm-config --cxxflags --ldflags --system-libs --libs core mcjit native orcjit) -rdynamic -O3 -o dtreeGen
(Please confirm and replace with the correct path of llvm@11.)

If you need to run this program, use the following command:
$./dtreeGen rule1.csv rule1 rule1.bc
(There are three parameters. The first parameter is the input CSV file. For its format, please refer to the CSV file given in the same directory. The first line is the correct and incorrect return values. Starting from the second row, the first column is where to compare. The second column is the value for comparison. The third column is the comparison relation or comparison symbol. The second parameter is the name of the Module. The third parameter is the name of the output file. This must be a .bc file)

After running the command, you can find the generated .bc file in the same directory and use the llvm C program to test. At the same time, you can find the generated module information from the command line.

All the .bc files are generated by DecisionTreeRulesGenDouble.cpp.

There are total 8 C programs can be run under this folder.

To run the tests of the llvm-jit version, use the following command:
$clang++ -g BinDecisionTreellvm.cpp functions.cpp $(/usr/local/llvm-11.1.0/bin/llvm-config --cxxflags --ldflags --system-libs --libs core mcjit native orcjit) -rdynamic -O3 -o dtreellvm
(Please confirm and replace with the correct path of llvm@11.)

And then choose the test datasets you want to test:
$./dtreellvm data.csv

You will then get the space and time of the inference from thr terminal and also the output file named decisionTreeOutput.txt is under the same folder.

To run BinDecisionTreeArray.cpp, BinDecisionTreePointer.cpp, BinDecisionTreePath.cpp or BinDecisionTreeSpecialized.cpp. First go to Makefile and comment the "SOURCES....." line which you do not want to run and leave the one you want to run.

And then, use the following command:
$make clean
$make
$./dtree data.csv

To run BinDecisionTreeArraySO.cpp, BinDecisionTreePointerSO.cpp or BinDecisionTreeSpecializedSO.cpp, use the following command to generate the shared libraries:
$g++ -O3 -shared -fpic -lm -ldl -o librules.so rules.cpp
(change the librules.so and rules.cpp to what you want: rules.cpp/tree.cpp/treepointer.cpp)

And then run the C test program using the following command:
$g++ -O3 functions.cpp DecisionTreeUseRulesSO.cpp -ldl -o dtreeso
$./dtreeso data.csv
