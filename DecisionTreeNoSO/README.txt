function.cpp contains the functions which will be used in DecisionTree.cpp and DecisionTreeUseRules.cpp and DecisionTreeUseSepRules.cpp.

train.txt is a training dataset for building Decision Tree.

test.txt is a test dataset which is the same as train.txt.

smalltest.txt is a small test dataset which contains 300 instances.

largertest.txt is a larger test dataset which contains 3000 instances.

rules.cpp is a C source file which contains the rules.

rule1.bc, rule2.bc, rule3.bc, rule4.bc, rule5.bc are the .bc files generated by DecisionTreeRulesGen.cpp.

rule_1.cpp, rule_2.cpp, rule_3.cpp, rule_4.cpp, rule_5.cpp are the C source rule files.

rule_1_loop.cpp is a C source rule file with for loop. Just for test purpose, you can check the llvm command line generated .ll code by using the following commands:
$clang -O3 -S -emit-llvm rule_1_loop.cpp
$cat rule_1_loop.ll

add.cpp and main.cpp is a simple test used to test how to use "objdump -j __text -d" to obtain machine code and how to use the machine code in a .cpp file.

To run the decision tree code. First go to Makefile and comment the "SOURCES....." line which you do not want to run and leave the one you want to run.

And then, use the following command if choosing to run tree nodes version:
$make clean
$make
$./dtree train.txt test.txt

Use the following command if choosing to run rules (including both one whole rule and separate rules) version:
$make clean
$make
$./dtree test.txt

DecisionTreeRulesGen.cpp is a C source file used to generate rule files. If you need to compile it, use the following command:
$ clang++ -g DecisionTreeRulesGen.cpp $(/usr/local/llvm-11.1.0/bin/llvm-config --cxxflags --ldflags --system-libs --libs core mcjit native orcjit) -rdynamic -O3 -o dtreeGen
(Please confirm and replace with the correct path of llvm@11.)

If you need to run this program, use the following command:
$./dtreeGen tree2.csv rule1 rule1.bc
(There are three parameters. The first parameter is the input CSV file. For its format, please refer to the CSV file given in the same directory. The first line is the correct and incorrect return values. Starting from the second row, the first column is where to compare. The second column is the value for comparison. The third column is the comparison relation or comparison symbol. The second parameter is the name of the Module. The third parameter is the name of the output file. This must be a .bc file)

After running, you can find the generated .bc file in the same directory and use the main program to test. At the same time, you can find the generated module information from the command line.
